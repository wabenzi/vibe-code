{
  "consumer": {
    "name": "user-management-frontend"
  },
  "interactions": [
    {
      "description": "a request to create a user",
      "pending": false,
      "providerStates": [
        {
          "name": "user does not exist"
        }
      ],
      "request": {
        "body": {
          "content": {
            "id": "user-123",
            "name": "John Doe"
          },
          "contentType": "application/json",
          "encoded": false
        },
        "headers": {
          "Content-Type": [
            "application/json"
          ]
        },
        "method": "POST",
        "path": "/users"
      },
      "response": {
        "body": {
          "content": {
            "createdAt": "2025-01-01T00:00:00.000Z",
            "id": "user-123",
            "name": "John Doe",
            "updatedAt": "2025-01-01T00:00:00.000Z"
          },
          "contentType": "application/json",
          "encoded": false
        },
        "headers": {
          "Content-Type": [
            "application/json"
          ]
        },
        "matchingRules": {
          "body": {
            "$.createdAt": {
              "combine": "AND",
              "matchers": [
                {
                  "format": "yyyy-MM-dd'T'HH:mm:ss.SSSX",
                  "match": "datetime"
                }
              ]
            },
            "$.updatedAt": {
              "combine": "AND",
              "matchers": [
                {
                  "format": "yyyy-MM-dd'T'HH:mm:ss.SSSX",
                  "match": "datetime"
                }
              ]
            }
          },
          "header": {},
          "status": {}
        },
        "status": 201
      },
      "type": "Synchronous/HTTP"
    },
    {
      "description": "a request to create a user that already exists",
      "pending": false,
      "providerStates": [
        {
          "name": "user already exists"
        }
      ],
      "request": {
        "body": {
          "content": {
            "id": "existing-user",
            "name": "Existing User"
          },
          "contentType": "application/json",
          "encoded": false
        },
        "headers": {
          "Content-Type": [
            "application/json"
          ]
        },
        "method": "POST",
        "path": "/users"
      },
      "response": {
        "body": {
          "content": {
            "error": "User with this ID already exists"
          },
          "contentType": "application/json",
          "encoded": false
        },
        "headers": {
          "Content-Type": [
            "application/json"
          ]
        },
        "status": 409
      },
      "type": "Synchronous/HTTP"
    },
    {
      "description": "a request to create a user with invalid data",
      "pending": false,
      "providerStates": [
        {
          "name": "user data is invalid"
        }
      ],
      "request": {
        "body": {
          "content": {
            "id": "",
            "name": "John Doe"
          },
          "contentType": "application/json",
          "encoded": false
        },
        "headers": {
          "Content-Type": [
            "application/json"
          ]
        },
        "method": "POST",
        "path": "/users"
      },
      "response": {
        "body": {
          "content": {
            "error": "Validation failed",
            "errors": [
              "id is required"
            ],
            "message": "Invalid input data"
          },
          "contentType": "application/json",
          "encoded": false
        },
        "headers": {
          "Content-Type": [
            "application/json"
          ]
        },
        "matchingRules": {
          "body": {
            "$.error": {
              "combine": "AND",
              "matchers": [
                {
                  "match": "type"
                }
              ]
            },
            "$.errors": {
              "combine": "AND",
              "matchers": [
                {
                  "match": "type"
                }
              ]
            },
            "$.message": {
              "combine": "AND",
              "matchers": [
                {
                  "match": "type"
                }
              ]
            }
          },
          "header": {},
          "status": {}
        },
        "status": 400
      },
      "type": "Synchronous/HTTP"
    },
    {
      "description": "a request to get a non-existent user",
      "pending": false,
      "providerStates": [
        {
          "name": "user does not exist"
        }
      ],
      "request": {
        "method": "GET",
        "path": "/users/non-existent-user"
      },
      "response": {
        "body": {
          "content": {
            "error": "User not found",
            "message": "User with ID 'non-existent-user' was not found",
            "userId": "non-existent-user"
          },
          "contentType": "application/json",
          "encoded": false
        },
        "headers": {
          "Content-Type": [
            "application/json"
          ]
        },
        "matchingRules": {
          "body": {
            "$.message": {
              "combine": "AND",
              "matchers": [
                {
                  "match": "type"
                }
              ]
            }
          },
          "header": {},
          "status": {}
        },
        "status": 404
      },
      "type": "Synchronous/HTTP"
    },
    {
      "description": "a request to get a user",
      "pending": false,
      "providerStates": [
        {
          "name": "user exists"
        }
      ],
      "request": {
        "method": "GET",
        "path": "/users/user-123"
      },
      "response": {
        "body": {
          "content": {
            "createdAt": "2025-01-01T00:00:00.000Z",
            "id": "user-123",
            "name": "John Doe",
            "updatedAt": "2025-01-01T00:00:00.000Z"
          },
          "contentType": "application/json",
          "encoded": false
        },
        "headers": {
          "Content-Type": [
            "application/json"
          ]
        },
        "matchingRules": {
          "body": {
            "$.createdAt": {
              "combine": "AND",
              "matchers": [
                {
                  "format": "yyyy-MM-dd'T'HH:mm:ss.SSSX",
                  "match": "datetime"
                }
              ]
            },
            "$.updatedAt": {
              "combine": "AND",
              "matchers": [
                {
                  "format": "yyyy-MM-dd'T'HH:mm:ss.SSSX",
                  "match": "datetime"
                }
              ]
            }
          },
          "header": {},
          "status": {}
        },
        "status": 200
      },
      "type": "Synchronous/HTTP"
    }
  ],
  "metadata": {
    "pact-js": {
      "version": "13.2.0"
    },
    "pactRust": {
      "ffi": "0.4.22",
      "models": "1.2.3"
    },
    "pactSpecification": {
      "version": "4.0"
    }
  },
  "provider": {
    "name": "user-management-api"
  }
}